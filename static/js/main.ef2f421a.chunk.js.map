{"version":3,"sources":["media/ltl_logo2.svg","index.less","media/camLogo.png","Instruction.js","serviceWorker.js","index.js"],"names":["module","exports","TextArea","Input","FormItem","Form","Item","getTask","t","json","require","setState","thisTask","console","log","state","tempTaskLog","tempGoals","goal","allOutlines","map","utt","outline","dialLen","length","outlines","goals","processTaskToShow","shouldRender","value","Instruction","_React$Component","_inherits","_super","_createSuper","props","_this","_classCallCheck","call","showModal","visible","handleOk","e","history","push","handleCancel","system_colour","user_colour","_createClass","key","this","id","preventDefault","_this2","React","createElement","AntLayout","Header","style","background","padding","Row","Col","span","float","marginLeft","width","src","CamLogo","alt","display","justifyContent","marginRight","CLLogo","Collapse","defaultActiveKey","Panel","header","Timeline","index","parse","Tag","color","Card","title","size","hoverable","descriptionvalue","svpair","Alert","message","description","type","showIcon","Divider","orientation","borderColor","Math","ceil","List","dataSource","grid","gutter","column","split","renderItem","item","idx","slot_idx","Tooltip","defaultVisible","Comment","avatar","Avatar","backgroundColor","icon","content","text","autoSize","minRows","maxRows","validateStatus","help","label","extra","Switch","unCheckedChildren","Icon","checkedChildren","defaultChecked","wrapperCol","offset","labelCol","Button","htmlType","onClick","handleClick","ID","Modal","onOk","onCancel","Component","create","Boolean","window","location","hostname","match","ReactDOM","render","HashRouter","Route","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ef2f421a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ltl_logo2.babdea68.svg\";","module.exports = __webpack_public_path__ + \"static/media/index.30d8c76c.less\";","export default __webpack_public_path__ + \"static/media/camLogo.3d5a5c79.png\";","import React from 'react';\nimport {\n    Tooltip,\n    Timeline,\n    Button,\n    Collapse,\n    Form,\n    Row,\n    Col,\n    Divider,\n    List,\n    Card,\n    Tag,\n    Input,\n    Alert,\n    Modal,\n    Comment, Avatar, Switch, Icon\n} from 'antd';\nimport {Layout as AntLayout,} from 'antd'\nimport CamLogo from './media/camLogo.png';\nimport CLLogo from \"./media/ltl_logo2.svg\";\nimport parse from 'html-react-parser'\nimport {target_language} from \"./configs\";\n\nconst { TextArea } = Input;\nconst FormItem = Form.Item;\n\nfunction processTaskToShow(t) {\n\n    console.log(\"Process Data to Show\")\n    console.log(t.state.thisTask)\n\n    let tempTaskLog = t.state.thisTask.log\n    let tempGoals = t.state.thisTask.goal\n\n    let allOutlines = tempTaskLog.map(function (utt) {\n        return utt.outline\n    });\n\n    let dialLen = allOutlines.length\n\n    console.log(\"Dialogue Length\")\n    console.log(dialLen)\n\n    t.setState(\n        {\n            outlines : allOutlines,\n             goals: tempGoals,\n            dialLen : dialLen\n        },function () {\n            // console.log(t.state.outlines[0][0].outline)\n        }\n    );\n\n    return null\n}\n\n\nfunction getTask(t) {\n\n    let json = require('./media/example.json');\n\n    t.setState(\n        {\n            thisTask : json,\n        }, function () {\n            console.log(\"This task is:\");\n            console.log(t.state.thisTask)\n            processTaskToShow(t);\n        }\n    );\n\n    return json\n\n}\n\nfunction shouldRender(value) {\n\n    if(value[2] === \"?\"){\n        return false;\n    } else if(value[2] === \"none\"){\n        return false\n    }\n\n    return value[3];\n}\n\n\nclass Instruction extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            thisTask: null,\n            outlines : [],\n            dialLen : 0,\n            goals : [],\n            visible: false,\n            system_colour :[\"gray\", \"#ECECEC\"],\n            user_colour :[\"#008B02\", \"#C8E6C9\"]\n\n        }\n    }\n\n\n    componentDidMount() {\n        getTask(this);\n    }\n\n    handleClick (id,e) {\n        e.preventDefault();\n        // console.log(\"Submitted Concession Form!\");\n        this.showModal();\n    };\n\n    showModal = () => {\n        this.setState({\n            visible: true,\n        });\n    };\n\n    handleOk = e => {\n        console.log(e);\n        this.setState({\n            visible: false,\n        });\n        this.props.history.push('/form');\n\n    };\n\n    handleCancel = e => {\n        console.log(e);\n        this.setState({\n            visible: false,\n        });\n    };\n\n    render() {\n\n        return <div>\n\n            <AntLayout.Header style={{background: '#f0f2f5', padding: 0}}>\n                <Row>\n                    <Col span={8}>\n                        <div key=\"logo1\" style={{float: \"left\", marginLeft: \"20px\"}}>\n                            <img width={\"200px\"} src={CamLogo} alt=\"logo\"/>\n                        </div>\n                    </Col>\n                    <Col span={8}>\n                        <div style={{display: 'flex', justifyContent: 'center'}}>\n                                <h2>\n                                    Multilingual Dialogue Collection\n                                </h2>\n                        </div>\n                    </Col>\n                    <Col span={8}>\n\n                        <div key=\"logo2\" style={{float: \"right\", marginRight: \"20px\"}}>\n                            <img width={\"120px\"} src={CLLogo} alt=\"logo\" />\n                        </div>\n                    </Col>\n                </Row>\n\n            </AntLayout.Header>\n\n            <Collapse defaultActiveKey={['1','2', \"3\"]}>\n                <Collapse.Panel header=\"Contact\" key=\"1\" >\n                    <p style={{\"fontSize\": 15, 'whiteSpace': 'pre-line'}}>\n                        Songbo Hu\n                        <br/>\n                        University of Cambridge\n                        <br/>\n                        sh2091@cam.ac.uk\n                    </p>\n\n\n                </Collapse.Panel>\n\n                <Collapse.Panel header=\"Introduction\" key=\"2\">\n\n\n                    {/*<Steps>*/}\n                    {/*    <Step title=\"Instruction\" description=\"You will find out what the experiment is about and what you will be asked to do.\" />*/}\n                    {/*    <Step title=\"Consent Form\" description=\"You will also be asked to sign a consent form.\" />*/}\n                    {/*    <Step title=\"Registration\" description=\"You will be headed to registration.\" />*/}\n                    {/*</Steps>*/}\n\n                    Imagine having a conversation with a telephone (or online) assistant where you want to complete a specific task.\n\n                    <br/>\n                    <br/>\n\n                    For example, you feel like visiting a city (e.g. Cambridge), and you may want to achieve the following goals by talking to the assistant:\n\n                    <br/>\n                    <br/>\n\n                    <Timeline>\n\n                        {this.state.thisTask == null ? (\n                            <div/>\n                        ) : (\n                            this.state.goals.map((goal, index) => (\n                                <Timeline.Item key = {index}>\n                                    {parse(goal)}.\n                                </Timeline.Item>\n                            ))\n                        )}\n                    </Timeline>\n\n                    In this experimental study, we ask you to <b>take on both roles</b>, the user and the assistant: what would a helpful assistant reply to your query? Try and imagine an actual conversation you might have with an employee of a hotel or an airline, or at a tourist information office – the aim is to write down <b>natural conversations</b> that could take place between two English native speakers.\n\n                    <br/>\n                    <br/>\n\n                    As a user, you will need to provide <b>all the information</b> that the assistant might need to carry out the task for you. You can be casual, like with someone you know and would address directly (e.g. “Can you help me find..?). Just like in the following card, you will be prompted to talk about specific types of information (e.g., destination, number of stops). Please make sure to include all the information in all cards if there are more than one.\n\n                    Particularly, make sure that all the values in the blue tag (e.g. <Tag color=\"blue\">cheap</Tag>) are <b>explicitly mentioned</b> in the utterance. However, you <b>do not have to copy</b> the word exactly. Paraphrasing and using synonyms is allowed and encouraged!\n\n                    <br/>\n                    <br/>\n\n                    {this.state.outlines.length === 0 ? (\n                        <div/>\n                    ) : (\n                        <Row>\n                            <Col span={10}>\n                                <Card title={this.state.outlines[0][0].outline} size=\"small\" hoverable = {true}>\n                                    {this.state.outlines[0][0].descriptionvalue.map((svpair, index) => (\n                                        <div key={index + \"#\" + index}>\n                                            { shouldRender(svpair) ? (\n                                                <p  >{svpair[0]} =  <Tag color=\"blue\">{svpair[2]}</Tag> </p>\n                                            ) : (\n                                                <p >{svpair[0]} = {svpair[2]}</p>\n                                            )}\n                                        </div>\n                                    ))}\n                                </Card>\n                            </Col>\n                        </Row>\n                    )}\n\n\n                    <br/>\n\n                    As the assistant, you will provide information about attractions, hospitals, police, hotels, restaurants, taxis, and trains to the user, based on the cards provided.\n\n                    <br/>\n                    <br/>\n                    <p style={{\"fontSize\": 20}}>Please be creative!</p>\n\n                    The dialogues are usually structured in a similar way, and many of the instructions will recur frequently. However, we encourage you to be <b>as creative as possible</b> when writing the dialogues – the more variation, the better! Each time you encounter a similar scenario (e.g., booking a hotel), it would be great if you could try to <b>formulate it slightly differently</b> as it would happen in real life. At the end of each dialogue, please quickly <b>reread</b> the conversation you created to make sure it sounds natural. In your dialogues, feel free to add a bit of context (“I’m in a rush”) to make the conversation more like in real life.\n\n                    <br/>\n                    <br/>\n\n\n                    {/*<p style={{\"fontSize\": 20}}>Please write natural and coherent dialogues!</p>*/}\n\n                    {/*You are encouraged to write <b>diverse</b> syntactic constructions as long as you, as a native speaker, find them <b>natural and coherent</b> in the dialogue context.*/}\n\n                    {/*<br/>*/}\n                    {/*<br/>*/}\n\n\n\n                    {/*<Row  style={{ background: '#ECECEC', padding: '10px'}}>*/}\n                    {/*    <Col span={12}>*/}\n                    {/*        <Col span={20}>*/}\n\n                    {/*            {this.state.outlines.length === 0 ? (*/}\n                    {/*                <Card title={\"hi\"} size=\"small\" hoverable = {true}>*/}\n                    {/*                </Card>*/}\n                    {/*            ) : (*/}\n                    {/*                <Card title={this.state.outlines[0][0].outline} size=\"small\" hoverable = {true}>*/}\n                    {/*                    {this.state.outlines[0][0].descriptionvalue.map((svpair, index) => (*/}\n                    {/*                        <div key={index + \"#\" + index}>*/}\n                    {/*                            { shouldRender(svpair) ? (*/}\n                    {/*                                <p  >{svpair[0]} =  <Tag color=\"blue\">{svpair[2]}</Tag> </p>*/}\n                    {/*                            ) : (*/}\n                    {/*                                <p >{svpair[0]} = {svpair[2]}</p>*/}\n                    {/*                            )}*/}\n\n                    {/*                        </div>*/}\n\n\n                    {/*                    ))}*/}\n                    {/*                </Card>*/}\n                    {/*            )}*/}\n                    {/*        </Col>*/}\n                    {/*    </Col>*/}\n\n                    {/*    <Col span={12}>*/}\n\n                    {/*        <TextArea value={\"Hi! Could you help me to find a hotel? I am looking for a cheap one.\"} style={{ width: '90%', marginRight: 8 }}   autoSize={{ minRows: 1, maxRows: 2 }} />*/}\n                    {/*        <br/>*/}\n                    {/*        <br/>*/}\n                    {/*        <TextArea value={\"Good morning! I am looking for a cheap hotel.\"} style={{ width: '90%', marginRight: 8 }}   autoSize={{ minRows: 1, maxRows: 2 }} />*/}\n                    {/*        <br/>*/}\n                    {/*        <br/>*/}\n                    {/*        <TextArea value={\"Do you know any economical hotels to stay at?\"} style={{ width: '90%', marginRight: 8 }}   autoSize={{ minRows: 1, maxRows: 2 }} />*/}\n                    {/*    </Col>*/}\n\n                    {/*</Row>*/}\n\n\n\n                    {/*<br/>*/}\n                    {/*<br/>*/}\n\n\n\n\n                    {/*<p style={{\"fontSize\": 20}}>In this experimental study, you are asked to write the dialogues in Arabic!</p>*/}\n                    <Alert\n                        message= {\"In this experimental study, you are asked to write the dialogues in \" + target_language + \"!\"}\n                        description={\"Please see the following example in English. You have to finish the following tasks similarly in \"+ target_language  + \".\"}\n                        type=\"warning\"\n                        showIcon\n                    />\n                    <br/>\n\n                    {/*Please try to be diverse and balanced for language-specific characteristics in Arabic that are not captured in English (e.g. gender).*/}\n\n                </Collapse.Panel>\n\n\n                <Collapse.Panel header=\"An example dialogue\" key=\"1\" >\n\n                    <div >\n\n                        {\n                            this.state.outlines.map((outline, index) => (\n\n                                <div key={index} >\n                                    {index % 2 === 0 ? (\n                                        <Divider orientation=\"left\" style={{ borderColor: 'red' }}>User Turn {Math.ceil(index / 2) + 1}</Divider>\n                                    ) :\n\n                                        <Divider orientation=\"left\">Assistant Turn {Math.ceil(index / 2)}</Divider>\n                                    }\n\n\n\n                                    <Row  style={{ background:  index % 2 === 0 ? (\n                                            '#ECECEC'\n                                            // this.state.system_colour[1]\n                                        ) : (\n                                            '#C8E6C9'\n                                            // this.state.user_colour[1]\n                                        ), padding: '10px'}}>\n                                    {/*<Col span={12} >*/}\n\n                                            {/*<div style={{ background: '#ECECEC', padding: '30px' }}>*/}\n                                            <List\n                                                dataSource={outline}\n                                                grid={{ gutter: 8, column: 2}}\n                                                split = {false}\n                                                renderItem={(item, idx) => (\n                                                    <List.Item key={index + \"#\" + idx} >\n                                                        <Col>\n\n                                                            <Card title={item.outline}  type=\"inner\" size=\"small\" hoverable = {true}>\n\n                                                                {item.descriptionvalue.map((svpair, slot_idx) => (\n                                                                    <div key={slot_idx + \"#\" + idx + svpair[2]}>\n                                                                        { shouldRender(svpair) ? (\n\n                                                                                <Row>\n                                                                                    <Col span={16}>\n                                                                                        <Form.Item>\n                                                                                            {svpair[0]} =  <Tag color=\"blue\">{svpair[2]}</Tag>\n                                                                                        </Form.Item>\n                                                                                    </Col>\n                                                                                    <Col span={8}>\n                                                                                        <Form.Item>\n\n                                                                                            {index === 0 && slot_idx === 0 && idx === 0 ?\n                                                                                                <Tooltip\n                                                                                                    title=\"Step 2: based on the utterance you just written, copy and paste the substring corresponding to the blue tags, in this case hotel, to this input box.\"\n                                                                                                    defaultVisible={true}\n                                                                                                    visible={true}\n                                                                                                >\n                                                                                                    <Input\n                                                                                                        type=\"text\"\n                                                                                                        size=\"small\"\n                                                                                                        value={svpair[4]}\n                                                                                                    />\n\n                                                                                                </Tooltip>\n                                                                                            :\n                                                                                                    <Input\n                                                                                                        type=\"text\"\n                                                                                                        size=\"small\"\n                                                                                                        value={svpair[4]}\n                                                                                                    />\n                                                                                            }\n                                                                                        </Form.Item>\n\n\n\n\n                                                                                    </Col>\n\n                                                                                </Row>\n                                                                        ) : (\n                                                                            <p >{svpair[0]} = {svpair[2]}</p>\n                                                                        )}\n\n                                                                    </div>\n\n\n                                                                ))}\n\n                                                            </Card>\n\n                                                        </Col>\n\n\n\n                                                    </List.Item>\n                                                )}\n                                            />\n\n                                        {/*</Col>*/}\n\n                                        <Col span={12}>\n\n                                            {index === 0 ?\n\n\n                                                <Tooltip\n                                                    title=\"Step 1: given the card(s) on the left-hand side, write a natural utterance describing all the information in all card(s).\"\n                                                    defaultVisible={true}\n                                                    visible={true}\n                                                >\n\n\n                                                    <Comment\n                                                        avatar={\n                                                            index % 2 === 0 ? (\n                                                                <Avatar\n                                                                    style={{ backgroundColor: this.state.system_colour[0]}} icon=\"user\"\n                                                                    alt=\"User\"\n                                                                />                                                                    ) : (\n                                                                <Avatar\n                                                                    style={{ backgroundColor: this.state.user_colour[0]}} icon=\"customer-service\"\n                                                                    alt=\"Assistant\"\n                                                                />\n                                                            )\n                                                        }\n                                                        content={\n                                                            <TextArea value={this.state.thisTask.log[index].text}\n                                                                      style={{width: '90%', marginRight: 8}}\n                                                                      autoSize={{minRows: 1, maxRows: 2}}/>\n                                                        }\n                                                    />\n\n\n                                                </Tooltip>\n\n                                                :\n\n                                                <div>\n                                                    {index === 1 ?\n                                                        <Tooltip\n                                                            title=\"Step 3: now, you need to act as an assistant and keep going until you finish the whole dialogue!\"\n                                                            defaultVisible={true}\n                                                            visible={true}\n                                                        >\n                                                            <Comment\n                                                                avatar={\n                                                                    index % 2 === 0 ? (\n                                                                        <Avatar\n                                                                            style={{ backgroundColor: this.state.system_colour[0]}} icon=\"user\"\n                                                                            alt=\"User\"\n                                                                        />                                                                    ) : (\n                                                                        <Avatar\n                                                                            style={{ backgroundColor: this.state.user_colour[0]}} icon=\"customer-service\"\n                                                                            alt=\"Assistant\"\n                                                                        />\n                                                                    )\n                                                                }\n                                                                content={\n                                                                    <TextArea value={this.state.thisTask.log[index].text}\n                                                                              style={{width: '90%', marginRight: 8}}\n                                                                              autoSize={{minRows: 1, maxRows: 2}}/>\n                                                                }\n                                                            />\n                                                        </Tooltip>\n                                                        :\n\n                                                        <div>\n\n                                                            {index === 9 ?\n\n                                                                <Tooltip\n                                                                    title=\"Step 4: when you finish the whole dialogue, please reread the dialogue you have written from top to bottom!\"\n                                                                    defaultVisible={true}\n                                                                    visible={true}\n                                                                >\n                                                                    <Comment\n                                                                        avatar={\n                                                                            index % 2 === 0 ? (\n                                                                                <Avatar\n                                                                                    style={{ backgroundColor: this.state.system_colour[0]}} icon=\"user\"\n                                                                                    alt=\"User\"\n                                                                                />                                                                    ) : (\n                                                                                <Avatar\n                                                                                    style={{ backgroundColor: this.state.user_colour[0]}} icon=\"customer-service\"\n                                                                                    alt=\"Assistant\"\n                                                                                />\n                                                                            )\n                                                                        }\n                                                                        content={\n                                                                            <TextArea value={this.state.thisTask.log[index].text}\n                                                                                      style={{width: '90%', marginRight: 8}}\n                                                                                      autoSize={{minRows: 1, maxRows: 2}}/>\n                                                                        }\n                                                                    />\n\n                                                                </Tooltip>\n                                                                :\n\n\n                                                                <Comment\n                                                                    avatar={\n                                                                        index % 2 === 0 ? (\n                                                                            <Avatar\n                                                                                style={{ backgroundColor: this.state.system_colour[0]}} icon=\"user\"\n                                                                                alt=\"User\"\n                                                                            />                                                                    ) : (\n                                                                            <Avatar\n                                                                                style={{ backgroundColor: this.state.user_colour[0]}} icon=\"customer-service\"\n                                                                                alt=\"Assistant\"\n                                                                            />\n                                                                        )\n                                                                    }\n                                                                    content={\n                                                                        <TextArea value={this.state.thisTask.log[index].text}\n                                                                                  style={{width: '90%', marginRight: 8}}\n                                                                                  autoSize={{minRows: 1, maxRows: 2}}/>\n                                                                    }\n                                                                />\n\n                                                            }\n\n                                                        </div>\n\n\n                                                    }\n                                                </div>\n\n\n                                            }\n                                        </Col>\n\n                                    </Row>\n\n\n\n\n\n                                </div>\n\n\n\n\n\n\n\n\n                            ))\n                        }\n\n                    </div>\n\n\n\n\n                </Collapse.Panel>\n\n                <Collapse.Panel header=\"More examples\" key=\"3\" >\n\n                    <div>\n\n\n\n                    <Divider orientation=\"left\">User Example 1</Divider>\n\n                    <Row  style={{ background: '#ECECEC', padding: '10px'}}>\n                        <Col span={12}>\n                            <Col span={20}>\n\n                                {this.state.outlines.length === 0 ? (\n                                    <Card title={\"hi\"} size=\"small\" hoverable = {true}>\n                                    </Card>\n                                ) : (\n                                    <Card title={this.state.outlines[0][0].outline} size=\"small\" hoverable = {true}>\n                                        {this.state.outlines[0][0].descriptionvalue.map((svpair, index) => (\n                                            <div key={index + \"#\" + index}>\n                                                { shouldRender(svpair) ? (\n                                                    <p  >{svpair[0]} =  <Tag color=\"blue\">{svpair[2]}</Tag> </p>\n                                                ) : (\n                                                    <p >{svpair[0]} = {svpair[2]}</p>\n                                                )}\n\n                                            </div>\n\n\n                                        ))}\n                                    </Card>\n                                )}\n                            </Col>\n                        </Col>\n\n                        <Col span={12}>\n\n                            <TextArea value={\"Hi! Could you help me to find a hotel? I am looking for a cheap one.\"} style={{ width: '90%', marginRight: 8 }}   autoSize={{ minRows: 1, maxRows: 2 }} />\n                            <br/>\n                            <br/>\n                            <TextArea value={\"Good morning! I am looking for a cheap hotel.\"} style={{ width: '90%', marginRight: 8 }}   autoSize={{ minRows: 1, maxRows: 2 }} />\n                            <br/>\n                            <br/>\n                            <TextArea value={\"Do you know any economical hotels to stay at?\"} style={{ width: '90%', marginRight: 8 }}   autoSize={{ minRows: 1, maxRows: 2 }} />\n                        </Col>\n\n                    </Row>\n                    <br/>\n\n                    <Alert\n                        message=\"Good Examples\"\n                        description=\"All those example utterances are good. All the information in the card is presented in those utterances, and you are encouraged to write natural and diverse utterances. Paraphrasing is acceptable and suggested.\"\n                        type=\"success\"\n                        showIcon\n                    />\n\n                    </div>\n\n                    <div>\n                        <Divider orientation=\"left\">User Example 2</Divider>\n\n                        <Row  style={{ background: '#ECECEC', padding: '10px'}}>\n                            <Col span={12}>\n                                <Col span={20}>\n\n                                    {this.state.outlines.length === 0 ? (\n                                        <Card title={\"hi\"} size=\"small\" hoverable = {true}>\n                                        </Card>\n                                    ) : (\n\n\n                                        <Card title={this.state.outlines[0][0].outline} size=\"small\" hoverable = {true}>\n                                            {this.state.outlines[0][0].descriptionvalue.map((svpair, index) => (\n                                                <div key={index + \"#\" + index}>\n                                                    { shouldRender(svpair) ? (\n                                                        <p  >{svpair[0]} =  <Tag color=\"blue\">{svpair[2]}</Tag> </p>\n                                                    ) : (\n                                                        <p >{svpair[0]} = {svpair[2]}</p>\n                                                    )}\n\n                                                </div>\n\n                                            ))}\n                                        </Card>\n                                    )}\n                                </Col>\n                            </Col>\n\n                            <Col span={12}>\n\n                                <Form.Item\n                                    validateStatus=\"error\"\n                                    help=\"Word corresponding to hotel is missing in this utterance.\"\n                                >\n                                    <TextArea value={\"Hi! Could you help me to find somewhere to live? I am looking for a cheap one.\"} style={{ width: '90%', marginRight: 8 }}   autoSize={{ minRows: 1, maxRows: 2 }} />\n                                </Form.Item>\n\n                                <Form.Item\n                                    validateStatus=\"error\"\n                                    help=\"Word corresponding to cheap is missing in this utterance.\"\n                                >\n                                    <TextArea value={\"I am looking for a hotel.\"} style={{ width: '90%', marginRight: 8 }}   autoSize={{ minRows: 1, maxRows: 2 }} />\n                                </Form.Item>\n\n                            </Col>\n\n                        </Row>\n                        <br/>\n\n                        <Alert\n                            message=\"Bad Examples\"\n                            description=\"In those examples, the blue tags are not explicitly presented. All the blue tags (no more and no less) should be presented in the utterances.\"\n                            type=\"error\"\n                            showIcon\n                        />\n\n                    </div>\n\n                    <div>\n\n                        <Divider orientation=\"left\">Assistant Example 1</Divider>\n\n                        <Row  style={{ background: '#C8E6C9', padding: '10px'}}>\n                            <Col span={12}>\n                                <Col span={24}>\n\n                                    {this.state.outlines.length === 0 ? (\n                                        <Card title={\"hi\"} size=\"small\" hoverable = {true}>\n                                        </Card>\n                                    ) : (\n\n\n\n                                        <List\n                                            dataSource={this.state.outlines[5]}\n                                            split = {false}\n                                            renderItem={(item, idx) => (\n                                                <List.Item key={\"exp3#\" + idx} >\n                                                    <Col span={20}>\n\n                                                        <Card title={item.outline} size=\"small\" hoverable = {true}>\n\n                                                            {item.descriptionvalue.map((svpair) => (\n                                                                <div key={\"exp3#\" + idx + svpair[2]}>\n                                                                    { shouldRender(svpair) ? (\n                                                                        <p  >{svpair[0]} =  <Tag color=\"blue\">{svpair[2]}</Tag> </p>\n                                                                    ) : (\n                                                                        <p >{svpair[0]} = {svpair[2]}</p>\n                                                                    )}\n\n                                                                </div>\n                                                            ))}\n\n                                                        </Card>\n\n                                                    </Col>\n\n\n\n                                                </List.Item>\n                                            )}\n                                        />\n                                    )}\n                                </Col>\n                            </Col>\n\n                            <Col span={12}>\n\n                                <Form.Item label=\"Good example\" validateStatus=\"success\">\n                                    <TextArea value={\"I am sorry to inform you that Tuesday is not available. Is there another day you would like to stay? Or maybe perhaps a shorter stay?\"} style={{ width: '90%', marginRight: 8 }}   autoSize={{ minRows: 1, maxRows: 2 }} />\n                                </Form.Item>\n\n\n\n                                <Form.Item\n                                    label=\"Bad examples\"\n                                    validateStatus=\"error\"\n                                    help=\"This utterance does not ask the user for the length of stay, which has been mentioned in the second card.\"\n                                >\n                                    <TextArea value={\n                                        \"I can not book that for you for Tuesday. Is there another day you would like to stay?\"}\n                                              style={{ width: '90%', marginRight: 8 }}   autoSize={{ minRows: 1, maxRows: 2 }} />\n                                </Form.Item>\n\n\n\n                                <Form.Item\n                                    validateStatus=\"error\"\n                                    help={\"Word corresponding to Tuesday is missing in this utterance. This utterance does not ask the user for a new day of booking, which is mentioned in the second card.\"}\n                                >\n                                    <TextArea value={\n                                        \"Would you like to change the length of your stay? How about another day you would like to stay?\"}\n                                              style={{ width: '90%', marginRight: 8 }}   autoSize={{ minRows: 1, maxRows: 2 }} />\n                                </Form.Item>\n\n                                          </Col>\n\n                        </Row>\n                        <br/>\n\n                        <Alert\n                            message=\"Assistant Utterances\"\n                            description=\"The same requirements also apply to assistance utterances. All information in all cards (no more and no less) should be presented in the utterances.\"\n                            type=\"warning\"\n                            showIcon\n                        />\n\n                    </div>\n\n\n\n                    <div>\n\n                        <Divider orientation=\"left\">Conversation Example 1</Divider>\n                        <Row  style={{ background: '#ECECEC', padding: '10px'}}>\n                            <Col span={12}>\n                                <Col span={20}>\n\n\n                                    <Card title={\"Ask the following information of the police station:\"} size=\"small\" hoverable = {true}>\n\n                                        <p  >name =  <Tag color=\"blue\">Parkside Police Station</Tag> </p>\n                                        <p  >postal code =  ?</p>\n\n                                    </Card>\n                                </Col>\n                            </Col>\n\n                            <Col span={12}>\n\n                                <TextArea value={\"Hi! Could you tell me what the postcode for Parkside Police Station is?\"} style={{ width: '90%', marginRight: 8 }}   autoSize={{ minRows: 1, maxRows: 2 }} />\n                            </Col>\n\n                        </Row>\n\n                        <br/>\n                        {/*Provide the following police station information to the user:*/}\n                        <Row  style={{ background: '#C8E6C9', padding: '10px'}}>\n                            <Col span={12}>\n                                <Col span={20}>\n\n                                    <Card title={\"Provide the following police station information to the user:\"} size=\"small\" hoverable = {true}>\n                                        <p  >name =  <Tag color=\"blue\">Parkside Police Station</Tag> </p>\n                                        <p  >postal code =  <Tag color=\"blue\">CB11JG</Tag></p>\n                                    </Card>\n\n                                </Col>\n                            </Col>\n\n                            <Col span={12}>\n\n                                <Form.Item\n                                    label=\"Good examples\"\n                                    validateStatus=\"success\"\n                                    help=\"You could directly refer to the police state with its name Parkside Police Station.\"\n                                >\n                                    <TextArea value={\n                                        \"Of course! The postcode for Parkside Police Station is CB11JG.\"}\n                                              style={{ width: '90%', marginRight: 8 }}   autoSize={{ minRows: 1, maxRows: 2 }} />\n                                </Form.Item>\n                                <Form.Item\n                                    validateStatus=\"success\"\n                                    help=\"You could also use a pronoun to refer to the Parkside Police Station if you find it is more natural in the context.\"\n                                >\n                                    <TextArea value={\n                                        \"My pleasure! The postcode of it is CB11JG.\"}\n                                              style={{ width: '90%', marginRight: 8 }}   autoSize={{ minRows: 1, maxRows: 2 }} />\n                                </Form.Item>\n\n                                <Form.Item\n                                    label=\"Bad examples\"\n                                    validateStatus=\"error\"\n                                    help=\"A word or phrase must refer to the values on blue cards. In this utterance, no words refer to Parkside Police Station.\"\n                                >\n                                    <TextArea value={\n                                        \"The postcode is CB11JG.\"}\n                                              style={{ width: '90%', marginRight: 8 }}   autoSize={{ minRows: 1, maxRows: 2 }} />\n                                </Form.Item>\n\n\n\n                            </Col>\n\n                        </Row>\n                        <br/>\n\n                        <Alert\n                            message=\"Please write natural and coherent dialogues!\"\n                            description=\"You are encouraged to write diverse syntactic constructions (e.g. anaphora, coreference) as long as you, as a native speaker, find them natural and coherent in the dialogue context.\"\n                            type=\"success\"\n                            showIcon\n                        />\n                    </div>\n\n\n\n\n                    <div>\n\n                        <Divider orientation=\"left\">Conversation Example 2</Divider>\n                        <Row  style={{ background: '#ECECEC', padding: '10px'}}>\n                            <Col span={12}>\n                                <Col span={20}>\n\n                                    <Card title={\"Ask the following information of the police station:\"} size=\"small\" hoverable = {true}\n                                          extra={\n\n                                        <Switch\n                                              unCheckedChildren={<Icon type=\"check\" />}\n                                              checkedChildren={<Icon type=\"close\" />}\n                                          />}\n\n\n\n\n                                    >\n\n                                        <Row>\n                                            <Col span={16}>\n                                                <Form.Item>\n                                                    <p  >name =  <Tag color=\"blue\">Parkside Police Station</Tag> </p>\n                                                </Form.Item>\n                                            </Col>\n                                            <Col span={8}>\n                                                <Form.Item>\n                                                    <Input\n                                                        type=\"text\"\n                                                        size=\"small\"\n                                                        value={\"Parkside Police Station\"}\n                                                    />\n\n                                                </Form.Item>\n                                            </Col>\n                                        </Row>\n\n                                        <p  >postal code =  ?</p>\n                                    </Card>\n                                </Col>\n                            </Col>\n\n                            <Col span={12}>\n\n                                <TextArea value={\"Hi! Could you tell me what the postcode for Parkside Police Station is?\"} style={{ width: '90%', marginRight: 8 }}   autoSize={{ minRows: 1, maxRows: 2 }} />\n                            </Col>\n\n                        </Row>\n\n                        <br/>\n                        {/*Provide the following police station information to the user:*/}\n                        <Row  style={{ background: '#C8E6C9', padding: '10px'}}>\n                            <Col span={12}>\n                                <Col span={20}>\n                                    <Card title={\"Inform the user of the following attraction information:\"} size=\"small\" hoverable = {true}\n                                          extra={\n                                              <Switch\n                                                  unCheckedChildren={<Icon type=\"check\"/>}\n                                                  checkedChildren={<Icon type=\"close\"/>}\n                                                  defaultChecked\n                                              />\n                                          }\n\n                                    >\n                                        <Row>\n                                            <Col span={16}>\n                                                <Form.Item>\n                                                    <p  >name =  <Tag color=\"blue\">the fitzwilliam museum</Tag> </p>\n                                                </Form.Item>\n                                            </Col>\n                                            <Col span={8}>\n                                                <Form.Item>\n                                                        <Input\n                                                            type=\"text\"\n                                                            size=\"small\"\n                                                            value={\"Parkside Police Station\"}\n                                                        />\n\n                                                </Form.Item>\n                                            </Col>\n                                        </Row>\n\n                                        <Row>\n                                            <Col span={16}>\n                                                <Form.Item>\n                                                    <p  >postal code =  <Tag color=\"blue\">CB11JG</Tag></p>\n                                                </Form.Item>\n                                            </Col>\n                                            <Col span={8}>\n                                                <Form.Item>\n                                                        <Input\n                                                            type=\"text\"\n                                                            size=\"small\"\n                                                            value={\"CB11JG\"}\n                                                        />\n                                                </Form.Item>\n                                            </Col>\n                                        </Row>\n\n\n                                    </Card>\n                                    <br/>\n                                    <Card title={\"Ask if the user need more information or help.\"} size=\"small\" hoverable = {true}\n                                          extra={<Switch\n                                              unCheckedChildren={<Icon type=\"check\" />}\n                                              checkedChildren={<Icon type=\"close\" />}\n                                          />}\n                                    >\n\n                                    </Card>\n                                </Col>\n                            </Col>\n\n                            <Col span={12}>\n\n                                <Form.Item>\n                                    <TextArea value={\n                                        \"Of course! The postcode for Parkside Police Station is CB11JG. Is there anything else that I could help?\"}\n                                              style={{ width: '90%', marginRight: 8 }}   autoSize={{ minRows: 1, maxRows: 2 }} />\n                                </Form.Item>\n                            </Col>\n\n                        </Row>\n                        <br/>\n\n                        <Alert\n                            message=\"Flag errors in the cards.\"\n                            description=\"You may find any errors in the cards. If you spot any errors, please flag them by flipping the switch to red on the top right of the card. Besides, try to write a coherent utterance which makes the dialogue as natural as possible and answer the boxes in the card accordingly, as in the above example.\"\n                            type=\"warning\"\n                            showIcon\n                        />\n                    </div>\n\n\n\n\n\n\n\n                </Collapse.Panel>\n\n            </Collapse>\n\n\n\n            <FormItem\n                wrapperCol={{ span: 12, offset: 10 }}\n                labelCol={{ span: 8, offset: 4 }}\n                label=\"Click Next to continue.\"\n            >\n                <Button type=\"primary\" htmlType=\"submit\" onClick={(e) => this.handleClick(this.state.ID,e)}>Next</Button>\n            </FormItem>\n\n\n            <Modal\n                title=\"Finally...\"\n                visible={this.state.visible}\n                onOk={this.handleOk}\n                onCancel={this.handleCancel}\n            >\n                <p>Thanks again for participating in our experiential study!</p>\n\n                <p>Please follow the provided instructions and let me know if you have any questions. We run both automatic and human tests to check the quality of your submissions.</p>\n\n                {/*<p>You will be paid within <b>7</b> days of your submission.</p>*/}\n\n                        <Alert\n                            description=\"Please be aware that we can only pay you if you follow the guidelines.\"\n                            type=\"warning\"\n                        />\n            </Modal>\n\n\n\n\n        </div>\n    }\n}\n\nexport default Form.create()(Instruction)","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Instruction from \"./Instruction\"\n\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.less';\nimport 'antd/dist/antd.css'\nimport './index.css';\n\nimport {HashRouter, Route, Switch} from 'react-router-dom'\n\nReactDOM.render(\n    <HashRouter>\n        <Switch>\n            {/*<Route path=\"/form\" component={ConcessionForm}/>*/}\n            {/*<Route path=\"/instruction\" component={Instruction}/>*/}\n            {/*<Route path=\"/registration\" component={Registration}/>*/}\n            {/*<Route path=\"/allDone\" component={AssignmentAllDone}/>*/}\n            {/*<Route path=\"/result\" component={AssignmentResult}/>*/}\n            {/*<Route path=\"/assignment\" component={Assignment}/>*/}\n            {/*<Route path=\"/login\" component={Login}/>*/}\n            {/*<Route path=\"/ad\" component={Advertisement}/>*/}\n            {/*<Route path=\"/demo\" component={Demo}/>*/}\n            <Route path=\"/\" component={Instruction}/>\n        </Switch>\n    </HashRouter>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}